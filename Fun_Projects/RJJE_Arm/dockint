#!/usr/bin/env bash
# This is a tool for docker as if a container's environment were on the host system. You work as your current user, all devices are available, and ports running in the container are shared with the host.

usage=\
"Usage: 
    1. dockint build <base_image_tag>  [PATH/URL] 
        - If PATH/URL to \"Dockerfile\"is specified, two images are built: base_image_tag and base_image_tag_img from the provided Dockerfile and context.
        - E.g., \$(pwd)
        - If PATH/URL is not specified, we assume base_image_tag has been created, and only base_image_tag_img will be built based on the existing base_image_tag
    2. dockint run <base_image_tag> <homedir> <cmd> <root>
        - homedir is the directory on the host machine, to be mounted onto /home/$USER inside container
        - cmd can be bash if bash is going to run
        - root: if empty, then base_image_tag_img will be run (user privilege). if "root", then base_image_tag will be run as root.
    3. dockint stop <base_image_tag>
        - stop a container with tag <base_image_tag>_img
    4. dockint join <CONTAINER_NAME>
        - join the running container. Note CONTAINER_NAME should be the part of \"CONTAINER_NAME_dockint\"
"

dockerfile=\
'ARG BASE=ubuntu:focal
FROM $BASE

# Make Xwindows work with the native x server and qt
ENV DISPLAY=:0
ENV QT_X11_NO_MITSHM=1

# Create env variables for user information with placeholder values. The real args are passed at build time, and set up the docker container to have the same users as the host system
ARG UNAME=robot
ARG UID=1000
ARG GID=1000

# create a normal user called "$USER"
RUN groupadd -f -g $GID $UNAME
RUN id -u $UNAME || useradd -m -u $UID -g $GID -s /bin/bash $UNAME

# change to the desired user
USER $UNAME
WORKDIR /home/$UNAME'


# determine if we need to use sudo when calling docker
if groups $USER | grep -q docker;
then
    DOCKER=docker
else
    DOCKER="sudo docker"
fi    

# set the base image name
base_image_tag=$2
new_image_tag="${base_image_tag}_img"
# name of the container to be built
container="$(basename ${base_image_tag}_dockint)"   #strip off everything before a "/"

if [ -z "$base_image_tag" ]
then
    printf "$usage"
    exit 1
fi

# build base_image_tag_img, and the base_image_tag if it not exists. Reason for that is base_image_tag_img will have user information so that we can use it as a regular user
dockerfile_dir=$3
function docker_build_image {
    # name of dockerfile to build(where applicable)
    if [ ! -z $dockerfile_dir ]
    then
        $DOCKER build --no-cache --tag $base_image_tag $dockerfile_dir
    fi
    
    #TODO
    printf "$dockerfile" | $DOCKER build --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg UNAME=$USER --build-arg BASE=$base_image_tag --tag "$new_image_tag" - 
    if [ $? -ne 0 ]; then
        echo "Failed to create docker image $base_image_tag."
        exit 1
    fi
}

#home directory to mount (where applicable)
homedir=$3
run_as_root=$4
function interactive_start {
    # check if homedir exists
    if [ -z $homedir ]; then
        echo "The directory \"$homedir\", to be mounted in the container at /home/$USER, does not exist. Please provide a valid directory to be mounted "
    fi

    if [ run_as_root=="root" ]; then 
      new_image_tag=$base_image_tag
      echo "$new_image_tag"
    fi

    # check if the base_image_tag_img has been created and if not create one
    if [ -z "$($DOCKER images -q $new_image_tag)" ]; then
        docker_build_image
    fi

    # check if the docker image is running and if not start it
    if [ -z "$($DOCKER ps -q -f NAME=$container)" ]; then 
      # run docker, giving it access to the specified devices and X windows. Cap-add and security-opt lets me use gdb to debug ros nodes. 
      xhost +local:root   #allows the root user to access the running X server

      # --host is the hostname a container uses for itself. 
      $DOCKER run -it --rm --name "$container" \
         --hostname "$HOST" \
         --env="DISPLAY" \
         --env="QT_X11_NO_MITSHM=1" \
         -v $homedir:/home/$USER \
         -v /tmp/.X11-unix:/tmp/.X11-unix \
         -v /etc/machine-id:/etc/machine-id \
         -v /var/run/dbus:/var/run/dbus \
         --device /dev/dri \
         --cap-add=SYS_PTRACE \
         --security-opt seccomp=unconfined \
         --privileged \
         --network=host \
         -v /dev/:/dev \
         -v $XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR \
         -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
         "$new_image_tag"

      if [ $? -ne 0 ]; then
          echo "Failed to start docker container $container."
          exit 1
      fi
    fi

}

function join {
    container_id=$($DOCKER ps -q -f NAME=$container)
    if [ -z "$container_id" ]; then 
      echo "$container is not running. Make sure it's running!" 
      exit 1
    else 
      docker exec -it $container_id bash
    fi
}

case $1 in
    build)
        docker_build_image
        exit 0
        ;;
    stop)
        echo "$@"
        $DOCKER stop "$container"
        exit $?
        ;;
    run)
        # issue a command in the container
        interactive_start
        # start a new shell session of the existing container. 
        # shift 3
        # $DOCKER exec -ti "$container" $@
        ;;
    join) 
        join 
        ;;
    *)
        printf "$usage"
        exit 0
        ;;
esac
